buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.7.RELEASE')
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
}

group = 'demo'
version = '20190828'


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'docker'
apply plugin: 'org.springframework.boot'

jar {
	baseName = 'demo'
	version = '20190828'
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}


task buildDocker(type: Docker){
	applicationName = jar.baseName
	tagVersion = jar.version
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}

sourceSets {
	test {
		java.srcDir file('src/test/java')
		//resources.srcDir file('src/test/resources')
	}
}

task integTest(type: Test) {
	compileJava.options.compilerArgs.remove '-parameters'
	testClassesDirs = sourceSets.test.output.classesDirs
	classpath = sourceSets.test.runtimeClasspath
}

test {
	// set heap size for the test JVM(s)
	maxHeapSize = "1024m"
	maxParallelForks = 1

	testLogging {
		events "started", "passed", "skipped", "failed"
		afterSuite testReport("test")
	}
}

Closure testReport(testType) {
	return { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			def output = "${testType} Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}

	}
}

check.dependsOn integTest

